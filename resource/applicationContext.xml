<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <!-- Enable annotation configuration -->
    <context:annotation-config/>
    <!-- Scan sample packages for Spring annotations -->
    <context:component-scan base-package="com.felix.Mapper"/>
    <context:component-scan base-package="com.felix.service"/>
    <context:component-scan base-package="com.felix.shiro"/>
    	<!-- 导入配置文件 -->
	<context:property-placeholder location="classpath:db.properties" />
	<!-- 配置数据源 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass"><value>${datasource.driver}</value></property>
		<property name="jdbcUrl"><value>${datasource.url}</value></property>
		<property name="user"><value>${datasource.username}</value></property>
		<property name="password"><value>${datasource.password}</value></property>
	</bean>
    <!-- 配置mybatis的sqlSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描mappers.xml文件 -->
		<property name="mapperLocations" value="classpath:com/felix/Mapper/*.xml"></property>
		<!-- mybatis配置文件 -->
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>                                                                                                                   																
	</bean>                                                                        																																																				
	<!-- DAO接口所在包名，Spring会自动查找其下的类 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.felix.Mapper" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	</bean>
	<!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">																																																	
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 配置事务通知属性 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<!-- 定义事务传播属性 -->
		<tx:attributes>
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="edit*" propagation="REQUIRED" />
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="new*" propagation="REQUIRED" />
			<tx:method name="set*" propagation="REQUIRED" />
			<tx:method name="remove*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="change*" propagation="REQUIRED" />
			<tx:method name="check*" propagation="REQUIRED" />
			<tx:method name="get*" propagation="REQUIRED" read-only="true" />
			<tx:method name="find*" propagation="REQUIRED" read-only="true" />
			<tx:method name="load*" propagation="REQUIRED" read-only="true" />
			<tx:method name="*" propagation="REQUIRED" read-only="true" />
		</tx:attributes>
	</tx:advice>
	<!-- 配置事务切面 -->
	<aop:config>
		<aop:pointcut id="serviceOperation"
			expression="execution(* com.felix.service.*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="serviceOperation" />
	</aop:config>
	<!-- 基于Form表单的身份验证过滤器 -->
    <bean id="formAuthenticationFilter" class="com.felix.shiro.FormLoginFilter">
<!--         <property name="usernameParam" value="username"/> -->
<!--         <property name="passwordParam" value="password"/> -->
<!--         <property name="rememberMeParam" value="rememberMe"/> -->
<!--         <property name="loginUrl" value="/user/login"/> -->
    </bean>
    <!-- 缓存管理器 使用Ehcache实现 -->
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManagerConfigFile" value="classpath:ehcache.xml"/>
    </bean>
     <!-- 凭证匹配器 -->
    <bean id="credentialsMatcher" class="com.felix.shiro.RtryLimitHashedCredentialsMatcher">
        <constructor-arg ref="cacheManager"/>
        <property name="hashAlgorithmName" value="md5"/>
        <property name="hashIterations" value="2"/>
        <property name="storedCredentialsHexEncoded" value="true"/>
    </bean>
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!--給 securityManager指定realm authenticator  authorizer cacheManager rememberMeManager subjectDAO subjectFactory-->
        <property name="realm" ref="MyRealm"/>
        <property name="cacheManager" ref="cacheManager"/>                                    																																																																																		                                       																																										
<!--          <property name="cacheManager" ref="cacheManager"/> -->
    </bean>
    <bean id="MyRealm" class="com.felix.shiro.MyRealm">
	      <property name="credentialsMatcher" ref="credentialsMatcher"/>
	        <property name="cachingEnabled" value="true"/>
	        <property name="authenticationCachingEnabled" value="true"/>
	        <property name="authenticationCacheName" value="authenticationCache"/>
	        <property name="authorizationCachingEnabled" value="true"/>
	        <property name="authorizationCacheName" value="authorizationCache"/>
    </bean>
    <!-- Post processor that automatically invokes init() and destroy() methods -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
    <!-- shiroFilter過濾器 id於web.xml進行匹配  -->
    <bean id="sysUserFilter" class="com.felix.shiro.SysUserFilter"></bean>
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <property name="loginUrl" value="/login.jsp"/>
        <property name="successUrl" value="/home"/>
        <property name="unauthorizedUrl" value="/unauthorized"/>
        <property name="filters">
            <util:map>
               <entry key="formfilter" value-ref="formAuthenticationFilter"/>
               <entry key="sysUser" value-ref="sysUserFilter"/>
            </util:map>
        </property>
          <!-- 過濾器鏈的定義-->
        <property name="filterChainDefinitions">
            <value>
            		/login.jsp=anon
            		 /login = formfilter
                /logout = logout
                /** = formfilter,sysUser
            </value>
        </property>
    </bean>
</beans>                                        																											
